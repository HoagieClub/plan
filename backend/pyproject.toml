# Build system configuration
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Project metadata
[project]
name = "hoagieplan-backend"
version = "1.1"
description = "Dependency manager for the hoagieplan backend"
authors = [{ name = "Hoagie Club", email = "hoagie@princeton.edu" }]
license = "MIT"
requires-python = ">=3.10"
keywords = ["django", "backend", "student", "planner", "app", "hoagieplan"]

# Main dependencies
dependencies = [
    "django>=5.1",
    "aniso8601",
    "asgiref",
    "build",
    "certifi",
    "charset-normalizer",
    "dj-database-url",
    "django-cors-headers",
    "djangorestframework",
    "idna",
    "lxml",
    "numpy",
    "packaging",
    "pandas",
    "promise",
    "psycopg2-binary",
    "psycopg2-pool",
    "pydeps",
    "pyproject-hooks",
    "python-cas",
    "python-dateutil",
    "python-dotenv",
    "pytz",
    "pyyaml",
    "requests",
    "ruff",
    "six",
    "sqlparse",
    "stdlib-list",
    "terminaltables",
    "typing-extensions",
    "tzdata",
    "ujson",
    "urllib3",
    "pre-commit",
    "gunicorn",
    "whitenoise",
    # "django-heroku", pip install this separately after running `uv sync`
    "tqdm",
    "bs4",
    "beautifulsoup4",
    "selenium",
    "webdriver-manager",
    "thefuzz",
    "psycopg[pool]>=3.2.1",
]

# Optional dependencies for development
[project.optional-dependencies]
dev = ["ruff", "pre-commit"]

# Project URLs
[project.urls]
Repository = "https://github.com/hoagieclub/plan"
# Documentation = "https://docs.astral.sh/uv" TODO: Write up docs on Mintlify

# Hatch build configuration for Django project
# This tells Hatch how to handle the project during build and installation
[tool.hatch.build]
artifacts = ["*.py", "*/"]
exclude = ["tests/"]

[tool.hatch.build.targets.wheel]
packages = ["."]

# Ruff configuration (a Python linter and formatter)
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 119
indent-width = 4

# Assuming Python 3.10+.
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "B", "Q"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# This is the (only) correct way to style strings (all my homies hate PEP 8)
[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double" # Enforce double quotes for docstrings
inline-quotes = "single"    # Enforce single quotes for inline strings

[tool.ruff.format]
quote-style = "single" # Default to single quotes for auto-formatting

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
